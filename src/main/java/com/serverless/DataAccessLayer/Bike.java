package com.serverless.DataAccessLayer;

import com.amazonaws.services.dynamodbv2.AmazonDynamoDB;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapper;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapperConfig;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapperConfig.TableNameOverride;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAttribute;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBHashKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBRangeKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBTable;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBQueryExpression;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBScanExpression;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAutoGeneratedKey;
import com.amazonaws.services.dynamodbv2.datamodeling.PaginatedQueryList;
import com.amazonaws.services.dynamodbv2.model.AttributeValue;

import java.io.IOException;
import java.util.HashMap;
import java.util.List;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

@DynamoDBTable(tableName = "PLACEHOLDER_PRODUCTS_TABLE_NAME")
public class Bike {

    // get the table name from env. var. set in serverless.yml
    private static final String BIKES_TABLE_NAME = System.getenv("BIKES_TABLE_NAME");

    private static DynamoDBAdapter db_adapter;
    private final AmazonDynamoDB client;
    private final DynamoDBMapper mapper;

    // private Logger logger = Logger.getLogger(this.getClass());
    private Logger LOG = LogManager.getLogger(this.getClass());
    
    private String geoHash;
    private String id;
    private String description;
    private String gender;
    private String frameSize;
    private String condition;
    private String address;
    private Double longitude;
    private Double latitude;

    @DynamoDBHashKey(attributeName = "id")
    @DynamoDBAutoGeneratedKey
    public String getId() {
        return this.id;
    }
    public void setId(String id) {
        this.id = id;
    }

    @DynamoDBRangeKey(attributeName = "geoHash")
    public String getLocation() {
        return this.geoHash;
    }
    public void setLocation(String location) {
        this.geoHash = location;
    }
    
    @DynamoDBAttribute(attributeName = "description")
    public String getDescription() {
        return this.description;
    }
    public void setDescription(String description) {
        this.description = description;
    }
    
    @DynamoDBAttribute(attributeName = "gender")
    public String getGender() {
        return this.gender;
    }
    public void setGender(String gender) {
        this.gender = gender;
    }
    
    @DynamoDBAttribute(attributeName = "frameSize")
    public String getFrameSize() {
        return this.frameSize;
    }
    public void setFrameSize(String frameSize) {
        this.frameSize = frameSize;
    }
    
    @DynamoDBAttribute(attributeName = "condition")
    public String getCondition() {
        return this.condition;
    }
    public void setCondition(String condition) {
        this.condition = condition;
    }
    
    @DynamoDBAttribute(attributeName = "address")
    public String getAddress() {
        return this.address;
    }
    public void setAddress(String address) {
        this.address = address;
    }
    
   
    @DynamoDBAttribute(attributeName = "longitude")
    public Double getLongitude() {
        return this.longitude;
    }
    public void setLongitude(Double longitude) {
        this.longitude = longitude;
    }
    
    
    @DynamoDBAttribute(attributeName = "latitude")
    public Double getLatitude() {
        return this.latitude;
    }
    public void setLatitude(Double latitude) {
        this.latitude = latitude;
    }

    

    public Bike() {
        // build the mapper config
        DynamoDBMapperConfig mapperConfig = DynamoDBMapperConfig.builder()
            .withTableNameOverride(new DynamoDBMapperConfig.TableNameOverride(BIKES_TABLE_NAME))
            .build();
        // get the db adapter
        this.db_adapter = DynamoDBAdapter.getInstance();
        this.client = this.db_adapter.getDbClient();
        // create the mapper with config
        this.mapper = this.db_adapter.createDbMapper(mapperConfig);
    }

    public String toString() {
        return String.format("Bike [id=%s, location=%s, description=%s, gender=%s, frameSize=%s, condition=%s, address=%s]", this.id, this.geoHash, this.description, this.gender, this.frameSize, this.condition, this.address);
        //, longitude=%s, latitude=%s
        
    }

    // methods
    public Boolean ifTableExists() {
        return this.client.describeTable(BIKES_TABLE_NAME).getTable().getTableStatus().equals("ACTIVE");
    }

    public List<Bike> list() throws IOException {
      DynamoDBScanExpression scanExp = new DynamoDBScanExpression();
      List<Bike> results = this.mapper.scan(Bike.class, scanExp);
      for (Bike b : results) {
        LOG.info("Bikes - list(): " + b.toString());
      }
      return results;
    }
    
    public List<Bike> listNearby(String geoHash) throws IOException {
    	
    	
    	LOG.info("Bikes Nearby Grabbing from DB");
    	HashMap<String, AttributeValue> eav = new HashMap<String, AttributeValue>();
    	eav.put(":v1", new AttributeValue().withS(geoHash));
    	
    	
        DynamoDBScanExpression scanExp = new DynamoDBScanExpression()
        	    .withFilterExpression("begins_with(geoHash,:v1)")
        	    .withExpressionAttributeValues(eav);
        
        List<Bike> results = this.mapper.scan(Bike.class, scanExp);
        for (Bike b : results) {
          LOG.info("Bikes Nearby - listNearby(): " + b.toString());
        }
        return results;
      }
    

    public Bike get(String id) throws IOException {
        Bike bike = null;

        HashMap<String, AttributeValue> av = new HashMap<String, AttributeValue>();
        av.put(":v1", new AttributeValue().withS(id));

        DynamoDBQueryExpression<Bike> queryExp = new DynamoDBQueryExpression<Bike>()
            .withKeyConditionExpression("id = :v1")
            .withExpressionAttributeValues(av);

        PaginatedQueryList<Bike> result = this.mapper.query(Bike.class, queryExp);
        if (result.size() > 0) {
          bike = result.get(0);
          LOG.info("Bikes - get(): bike - " + bike.toString());
        } else {
          LOG.info("Bikes - get(): bike - Not Found.");
        }
        return bike;
    }

    public void save(Bike bike) throws IOException {
        LOG.info("Bikes - save(): " + bike.toString());
        this.mapper.save(bike);
    }

    public Boolean delete(String id) throws IOException {
        Bike bike = null;

        // get bike if exists
        bike = get(id);
        if (bike != null) {
          LOG.info("Bikes - delete(): " + bike.toString());
          this.mapper.delete(bike);
        } else {
          LOG.info("Bikes - delete(): bike - does not exist.");
          return false;
        }
        return true;
    }

}
